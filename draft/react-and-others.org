#+title: React 相关笔记 
#+author: 梁子
#+date: Mon Jun 28 22:15:57 2021
#+email: 2273067585@qq.com

* 零碎知识
  
** 同步和异步
   学习到async-await组合，简略了解了一下。
   
 1. async是异步的意思。同步和异步的区别：同步——顺序执行，即主线程产生一个子线程，子线程执行完成后，主线程会继续执行。
 2. 异步：不是同步。即子线程可与主线程同时进行。因此，界面可以接受多个响应，而不是一一顺序回复。
 3. 回调函数：当异步的一个操作执行完成后需要在主线程进行的结果处理函数。
 4. promise：代表了未来将要发生的事件，用来传递异步操作的消息。promise的状态：1）pending：未确定；2）fulfilled：成功；3）rejected：失败。
 5. promise与event的不同：envent错过了就找不到了，promise的状态会被凝固住。
 6. promise返回的结果：resolve：解析；reject，拒绝

** feathers的设计哲学

** react的设计哲学

** 前端设计存在的困难

** 后端的本质是什么？
   后端的骨肉是“数据”，或数据库。后端的本质是：
1. 设计一种方式将数据美妙地组织出来，也就是数据库；
2. 能够了解各种数据之间的关系，及对数据的操作；

   所以，核心是要从这几个角度去理解后端。所以，看后端相关的代码，要理清楚有哪些数据库，他们分别对应哪些操作，之后才是，根据业务需求去设计相关的功能。

** 阅读别人代码时的一点体会
   + 对于熟悉的事物，读代码比写代码更重要，因为这是在提升深度。
   + 对于不熟悉的事物，读代码是一个开始。但必须要自己写，否则毫无意义。
   + 如果是对一个新的领域开始学习的状态，如语言、框架、库全都是陌生的，那么读的时候应当注意：
     + 不能烦躁。用心躁，则一事无成。
     + 从入口开始读，一个项目，其文件组织结构大多是一棵树，从入口开始慢慢阅读就好了。
     + 多搜索，以了解API的含义，或一些功能。
     + 多写注释，至少每个单元，都必须有注释。
   
* 算法与开发的关系，算法在系统中的地位

* render机制
