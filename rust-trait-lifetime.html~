<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2022-03-26 周六 21:55 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>为什么rust是安全的？从泛型的角度进一步解析</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Zi Liang" />
<link rel="stylesheet" type="text/css" href="./css/worg.css" />
<script type="text/javascript">
// @license magnet:?xt=urn:btih:e95b018ef3580986a04669f1b5879592219e2a7a&dn=public-domain.txt Public Domain
<!--/*--><![CDATA[/*><!--*/
     function CodeHighlightOn(elem, id)
     {
       var target = document.getElementById(id);
       if(null != target) {
         elem.classList.add("code-highlighted");
         target.classList.add("code-highlighted");
       }
     }
     function CodeHighlightOff(elem, id)
     {
       var target = document.getElementById(id);
       if(null != target) {
         elem.classList.remove("code-highlighted");
         target.classList.remove("code-highlighted");
       }
     }
    /*]]>*///-->
// @license-end
</script>
</head>
<body>
<div id="content">
<h1 class="title">为什么rust是安全的？从泛型的角度进一步解析</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org806caa3">1. 泛型——和C++没有区别</a></li>
<li><a href="#org563046f">2. trait-直译就是：个性</a>
<ul>
<li><a href="#org3aa29ea">2.1. 我们为什么需要trait？</a></li>
<li><a href="#org4aa3657">2.2. 使用trait约束函数或结构体</a></li>
<li><a href="#org034c2b6">2.3. 把trait当作一种高级类型，以约束函数和泛型</a>
<ul>
<li><a href="#org70cd176">2.3.1. 用trait约束函数</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<p>
如果我没有读过之前的<a href="rust-learning.html">这篇</a>介绍，那么最好还是先学习一下所有权（ownership）吧！
</p>

<div id="outline-container-org806caa3" class="outline-2">
<h2 id="org806caa3"><span class="section-number-2">1</span> 泛型——和C++没有区别</h2>
<div class="outline-text-2" id="text-1">
<p>
如果我忘记C++的了，推荐阅读： <a href="template-C++.html">C++的泛型笔记</a> 
</p>

<p>
让我们先来简单过一下rust写泛型的语法，很快的过一遍。
</p>

<div class="org-src-container">
<pre class="src src-rust">              <span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">Point</span><span style="color: #707183;">&lt;</span><span style="color: #2F8B58; font-weight: bold;">T</span><span style="color: #707183;">&gt;</span> <span style="color: #707183;">{</span>
                  <span style="color: #0084C8; font-weight: bold;">x</span>: <span style="color: #2F8B58; font-weight: bold;">T</span>,
                  <span style="color: #0084C8; font-weight: bold;">y</span>: <span style="color: #2F8B58; font-weight: bold;">T</span>,
              <span style="color: #707183;">}</span>

            <span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">main</span><span style="color: #707183;">()</span> <span style="color: #707183;">{</span>
                <span style="color: #A52A2A; font-weight: bold;">let</span> <span style="color: #0084C8; font-weight: bold;">integer</span> = <span style="color: #2F8B58; font-weight: bold;">Point</span> <span style="color: #7388d6;">{</span> <span style="color: #0084C8; font-weight: bold;">x</span>: 5, <span style="color: #0084C8; font-weight: bold;">y</span>: 10 <span style="color: #7388d6;">}</span>;
                <span style="color: #A52A2A; font-weight: bold;">let</span> <span style="color: #0084C8; font-weight: bold;">float</span> = <span style="color: #2F8B58; font-weight: bold;">Point</span> <span style="color: #7388d6;">{</span> <span style="color: #0084C8; font-weight: bold;">x</span>: 1.0, <span style="color: #0084C8; font-weight: bold;">y</span>: 4.0 <span style="color: #7388d6;">}</span>;
            <span style="color: #707183;">}</span>

          <span style="color: #204A87;">//</span><span style="color: #204A87;">============================================</span>

        <span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">Point</span><span style="color: #707183;">&lt;</span><span style="color: #2F8B58; font-weight: bold;">T</span>, <span style="color: #2F8B58; font-weight: bold;">U</span><span style="color: #707183;">&gt;</span> <span style="color: #707183;">{</span>
            <span style="color: #0084C8; font-weight: bold;">x</span>: <span style="color: #2F8B58; font-weight: bold;">T</span>,
            <span style="color: #0084C8; font-weight: bold;">y</span>: <span style="color: #2F8B58; font-weight: bold;">U</span>,
        <span style="color: #707183;">}</span>

        <span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">main</span><span style="color: #707183;">()</span> <span style="color: #707183;">{</span>
            <span style="color: #A52A2A; font-weight: bold;">let</span> <span style="color: #0084C8; font-weight: bold;">both_integer</span> = <span style="color: #2F8B58; font-weight: bold;">Point</span> <span style="color: #7388d6;">{</span> <span style="color: #0084C8; font-weight: bold;">x</span>: 5, <span style="color: #0084C8; font-weight: bold;">y</span>: 10 <span style="color: #7388d6;">}</span>;
            <span style="color: #A52A2A; font-weight: bold;">let</span> <span style="color: #0084C8; font-weight: bold;">both_float</span> = <span style="color: #2F8B58; font-weight: bold;">Point</span> <span style="color: #7388d6;">{</span> <span style="color: #0084C8; font-weight: bold;">x</span>: 1.0, <span style="color: #0084C8; font-weight: bold;">y</span>: 4.0 <span style="color: #7388d6;">}</span>;
            <span style="color: #A52A2A; font-weight: bold;">let</span> <span style="color: #0084C8; font-weight: bold;">integer_and_float</span> = <span style="color: #2F8B58; font-weight: bold;">Point</span> <span style="color: #7388d6;">{</span> <span style="color: #0084C8; font-weight: bold;">x</span>: 5, <span style="color: #0084C8; font-weight: bold;">y</span>: 4.0 <span style="color: #7388d6;">}</span>;
        <span style="color: #707183;">}</span>

          <span style="color: #204A87;">//</span><span style="color: #204A87;">============================================</span>

      <span style="color: #A52A2A; font-weight: bold;">enum</span> <span style="color: #2F8B58; font-weight: bold;">Option</span><span style="color: #707183;">&lt;</span><span style="color: #2F8B58; font-weight: bold;">T</span><span style="color: #707183;">&gt;</span> <span style="color: #707183;">{</span>
          <span style="color: #2F8B58; font-weight: bold;">Some</span><span style="color: #7388d6;">(</span><span style="color: #2F8B58; font-weight: bold;">T</span><span style="color: #7388d6;">)</span>,
          <span style="color: #2F8B58; font-weight: bold;">None</span>,
      <span style="color: #707183;">}</span>

          <span style="color: #204A87;">//</span><span style="color: #204A87;">============================================</span>

    <span style="color: #A52A2A; font-weight: bold;">enum</span> <span style="color: #2F8B58; font-weight: bold;">Result</span><span style="color: #707183;">&lt;</span><span style="color: #2F8B58; font-weight: bold;">T</span>, <span style="color: #2F8B58; font-weight: bold;">E</span><span style="color: #707183;">&gt;</span> <span style="color: #707183;">{</span>
        <span style="color: #2F8B58; font-weight: bold;">Ok</span><span style="color: #7388d6;">(</span><span style="color: #2F8B58; font-weight: bold;">T</span><span style="color: #7388d6;">)</span>,
        <span style="color: #2F8B58; font-weight: bold;">Err</span><span style="color: #7388d6;">(</span><span style="color: #2F8B58; font-weight: bold;">E</span><span style="color: #7388d6;">)</span>,
    <span style="color: #707183;">}</span>
          <span style="color: #204A87;">//</span><span style="color: #204A87;">============================================</span>

  <span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">Point</span><span style="color: #707183;">&lt;</span><span style="color: #2F8B58; font-weight: bold;">T</span><span style="color: #707183;">&gt;</span> <span style="color: #707183;">{</span>
      <span style="color: #0084C8; font-weight: bold;">x</span>: <span style="color: #2F8B58; font-weight: bold;">T</span>,
      <span style="color: #0084C8; font-weight: bold;">y</span>: <span style="color: #2F8B58; font-weight: bold;">T</span>,
  <span style="color: #707183;">}</span>

  <span style="color: #A52A2A; font-weight: bold;">impl</span><span style="color: #707183;">&lt;</span><span style="color: #2F8B58; font-weight: bold;">T</span><span style="color: #707183;">&gt;</span> <span style="color: #2F8B58; font-weight: bold;">Point</span><span style="color: #707183;">&lt;</span><span style="color: #2F8B58; font-weight: bold;">T</span><span style="color: #707183;">&gt;</span> <span style="color: #707183;">{</span>
      <span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">x</span><span style="color: #7388d6;">(</span><span style="color: #2E3436; background-color: #EDEDED;">&amp;</span><span style="color: #A52A2A; font-weight: bold;">self</span><span style="color: #7388d6;">)</span> -&gt; <span style="color: #2E3436; background-color: #EDEDED;">&amp;</span><span style="color: #2F8B58; font-weight: bold;">T</span> <span style="color: #7388d6;">{</span>
          <span style="color: #2E3436; background-color: #EDEDED;">&amp;</span><span style="color: #A52A2A; font-weight: bold;">self</span>.x
      <span style="color: #7388d6;">}</span>
  <span style="color: #707183;">}</span>

  <span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">main</span><span style="color: #707183;">()</span> <span style="color: #707183;">{</span>
      <span style="color: #A52A2A; font-weight: bold;">let</span> <span style="color: #0084C8; font-weight: bold;">p</span> = <span style="color: #2F8B58; font-weight: bold;">Point</span> <span style="color: #7388d6;">{</span> <span style="color: #0084C8; font-weight: bold;">x</span>: 5, <span style="color: #0084C8; font-weight: bold;">y</span>: 10 <span style="color: #7388d6;">}</span>;

      <span style="color: #A020F0;">println!</span><span style="color: #7388d6;">(</span><span style="color: #4E9A06;">"p.x = </span><span style="color: #4E9A06; font-style: italic;">{}</span><span style="color: #4E9A06;">"</span>, p.x<span style="color: #909183;">()</span><span style="color: #7388d6;">)</span>;
  <span style="color: #707183;">}</span>
  <span style="color: #204A87;">//</span><span style="color: #204A87;">==========&#26368;&#22797;&#26434;&#30340;&#20363;&#23376;=====================================</span>
<span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">Point</span><span style="color: #707183;">&lt;</span><span style="color: #2F8B58; font-weight: bold;">T</span>, <span style="color: #2F8B58; font-weight: bold;">U</span><span style="color: #707183;">&gt;</span> <span style="color: #707183;">{</span>
    <span style="color: #0084C8; font-weight: bold;">x</span>: <span style="color: #2F8B58; font-weight: bold;">T</span>,
    <span style="color: #0084C8; font-weight: bold;">y</span>: <span style="color: #2F8B58; font-weight: bold;">U</span>,
<span style="color: #707183;">}</span>

<span style="color: #A52A2A; font-weight: bold;">impl</span><span style="color: #707183;">&lt;</span><span style="color: #2F8B58; font-weight: bold;">T</span>, <span style="color: #2F8B58; font-weight: bold;">U</span><span style="color: #707183;">&gt;</span> <span style="color: #2F8B58; font-weight: bold;">Point</span><span style="color: #707183;">&lt;</span><span style="color: #2F8B58; font-weight: bold;">T</span>, <span style="color: #2F8B58; font-weight: bold;">U</span><span style="color: #707183;">&gt;</span> <span style="color: #707183;">{</span>
    <span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">mixup</span><span style="color: #7388d6;">&lt;</span><span style="color: #2F8B58; font-weight: bold;">V</span>, <span style="color: #2F8B58; font-weight: bold;">W</span><span style="color: #7388d6;">&gt;(</span><span style="color: #A52A2A; font-weight: bold;">self</span>, <span style="color: #0084C8; font-weight: bold;">other</span>: <span style="color: #2F8B58; font-weight: bold;">Point</span><span style="color: #909183;">&lt;</span><span style="color: #2F8B58; font-weight: bold;">V</span>, <span style="color: #2F8B58; font-weight: bold;">W</span><span style="color: #909183;">&gt;</span><span style="color: #7388d6;">)</span> -&gt; <span style="color: #2F8B58; font-weight: bold;">Point</span><span style="color: #7388d6;">&lt;</span><span style="color: #2F8B58; font-weight: bold;">T</span>, <span style="color: #2F8B58; font-weight: bold;">W</span><span style="color: #7388d6;">&gt;</span> <span style="color: #7388d6;">{</span>
        <span style="color: #2F8B58; font-weight: bold;">Point</span> <span style="color: #909183;">{</span>
            <span style="color: #0084C8; font-weight: bold;">x</span>: <span style="color: #A52A2A; font-weight: bold;">self</span>.x,
            <span style="color: #0084C8; font-weight: bold;">y</span>: other.y,
        <span style="color: #909183;">}</span>
    <span style="color: #7388d6;">}</span>
<span style="color: #707183;">}</span>

<span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">main</span><span style="color: #707183;">()</span> <span style="color: #707183;">{</span>
    <span style="color: #A52A2A; font-weight: bold;">let</span> <span style="color: #0084C8; font-weight: bold;">p1</span> = <span style="color: #2F8B58; font-weight: bold;">Point</span> <span style="color: #7388d6;">{</span> <span style="color: #0084C8; font-weight: bold;">x</span>: 5, <span style="color: #0084C8; font-weight: bold;">y</span>: 10.4 <span style="color: #7388d6;">}</span>;
    <span style="color: #A52A2A; font-weight: bold;">let</span> <span style="color: #0084C8; font-weight: bold;">p2</span> = <span style="color: #2F8B58; font-weight: bold;">Point</span> <span style="color: #7388d6;">{</span> <span style="color: #0084C8; font-weight: bold;">x</span>: <span style="color: #4E9A06;">"Hello"</span>, <span style="color: #0084C8; font-weight: bold;">y</span>: <span style="color: #4E9A06;">'c'</span><span style="color: #7388d6;">}</span>;

    <span style="color: #A52A2A; font-weight: bold;">let</span> <span style="color: #0084C8; font-weight: bold;">p3</span> = p1.mixup<span style="color: #7388d6;">(</span>p2<span style="color: #7388d6;">)</span>;

    <span style="color: #A020F0;">println!</span><span style="color: #7388d6;">(</span><span style="color: #4E9A06;">"p3.x = </span><span style="color: #4E9A06; font-style: italic;">{}</span><span style="color: #4E9A06;">, p3.y = </span><span style="color: #4E9A06; font-style: italic;">{}</span><span style="color: #4E9A06;">"</span>, p3.x, p3.y<span style="color: #7388d6;">)</span>;
<span style="color: #707183;">}</span>
</pre>
</div>


<p>
总结一句话就是：我们认为，泛型可以对类型进行更好地抽象。
</p>
</div>
</div>

<div id="outline-container-org563046f" class="outline-2">
<h2 id="org563046f"><span class="section-number-2">2</span> trait-直译就是：个性</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-org3aa29ea" class="outline-3">
<h3 id="org3aa29ea"><span class="section-number-3">2.1</span> 我们为什么需要trait？</h3>
<div class="outline-text-3" id="text-2-1">
<p>
泛型可能看起来是一个很好的东西，但是这个东西有一个问题： <b>如果我实例化的类型符合我的泛型，那么泛型代码就可以很好地被执行。如果我实例化的类型里，缺少了某些操作，泛型就会出问题。</b> 上述问题最可怕的地方是： <b>编译时：我们并不知道我们的泛型适不适合这个类型</b> 。
trait就是为了解决以上问题而生的。
</p>

<p>
trait就是定义和规定了：这么一些类型可以进行什么样子的操作，有点类似于接口，但是更加强调的是类型的特点，也就是类型支持哪些函数。虽然trait在设计时：一个trait可以包括多个函数，但是一般而言一个trait里可能只有一个函数。
</p>

<p>
另外一个理解trait的视角是：泛型是一种抽象，而抽象就需要有共性。而trait，就是实现这种共性的基础，也就是基础的共性。比如，加入我要写一个泛型函数，能够对一个向量排序，不管这个向量是整数向量还是字符串向量。那么我们注意到，实现排序需要一个基础操作：比较两个数的大小。如果我没有对整数、字符串中的某一个实现这个基础操作，那么泛型就无法通用。trait捕捉到了这种共同的基础。
</p>

<p>
   我的另外一个理解是：trait挖掘到了实现抽象中的差异。也就是说：trait所要求各个类型实现的，恰恰就是各个类型的特点（你看，这也是trait的意思），也就是各个类型必须自我实现的特点，trait强迫各个类型实现。
再以上面的例子为例，对于实现比较性，整数和字符串有先天的不同，所以我必须实现一个字符串比较的函数，以满足这个trait。
</p>

<p>
那么可能有一个问题：我能不能不使用trait，直接写泛型？其实是可以的。trait实现了解耦，让泛型写得更加抽象简洁。你可以在泛型里写枚举，实现同样的功能——代码量没有变化。比如上面的例子，我可以判断泛型的类型，如果是字符串，我把字符串排序的方式写上去，就可以了。当然，这在rust里可能行不通。
</p>

<p>
现在你应该了解了trait了，我们现在来看看怎么用trait约束一个类型。
</p>
</div>
</div>

<div id="outline-container-org4aa3657" class="outline-3">
<h3 id="org4aa3657"><span class="section-number-3">2.2</span> 使用trait约束函数或结构体</h3>
<div class="outline-text-3" id="text-2-2">
<p>
先定义一个trait。
</p>
<div class="org-src-container">
<pre class="src src-rust"><span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #A52A2A; font-weight: bold;">trait</span> <span style="color: #2F8B58; font-weight: bold;">Summary</span> <span style="color: #707183;">{</span>
    <span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">summarize</span><span style="color: #7388d6;">(</span><span style="color: #2E3436; background-color: #EDEDED;">&amp;</span><span style="color: #A52A2A; font-weight: bold;">self</span><span style="color: #7388d6;">)</span> -&gt; <span style="color: #2F8B58; font-weight: bold;">String</span>;
<span style="color: #707183;">}</span>

</pre>
</div>

<p>
之后，我们定义两个类型，并分别为他们实现这个trait。
</p>


<div class="org-src-container">
<pre class="src src-rust">
<span style="color: #A020F0;">#!</span><span style="color: #707183;">[</span><span style="color: #A020F0;">allow</span><span style="color: #7388d6;">(</span><span style="color: #A020F0;">unused</span><span style="color: #7388d6;">)</span><span style="color: #707183;">]</span>
<span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">main</span><span style="color: #707183;">()</span> <span style="color: #707183;">{</span>
<span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #A52A2A; font-weight: bold;">trait</span> <span style="color: #2F8B58; font-weight: bold;">Summary</span> <span style="color: #7388d6;">{</span>
    <span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">summarize</span><span style="color: #909183;">(</span><span style="color: #2E3436; background-color: #EDEDED;">&amp;</span><span style="color: #A52A2A; font-weight: bold;">self</span><span style="color: #909183;">)</span> -&gt; <span style="color: #2F8B58; font-weight: bold;">String</span>;
<span style="color: #7388d6;">}</span>

<span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">NewsArticle</span> <span style="color: #7388d6;">{</span>
    <span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #0084C8; font-weight: bold;">headline</span>: <span style="color: #2F8B58; font-weight: bold;">String</span>,
    <span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #0084C8; font-weight: bold;">location</span>: <span style="color: #2F8B58; font-weight: bold;">String</span>,
    <span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #0084C8; font-weight: bold;">author</span>: <span style="color: #2F8B58; font-weight: bold;">String</span>,
    <span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #0084C8; font-weight: bold;">content</span>: <span style="color: #2F8B58; font-weight: bold;">String</span>,
<span style="color: #7388d6;">}</span>

<span style="color: #A52A2A; font-weight: bold;">impl</span> <span style="color: #2F8B58; font-weight: bold;">Summary</span> <span style="color: #A52A2A; font-weight: bold;">for</span> <span style="color: #2F8B58; font-weight: bold;">NewsArticle</span> <span style="color: #7388d6;">{</span>
    <span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">summarize</span><span style="color: #909183;">(</span><span style="color: #2E3436; background-color: #EDEDED;">&amp;</span><span style="color: #A52A2A; font-weight: bold;">self</span><span style="color: #909183;">)</span> -&gt; <span style="color: #2F8B58; font-weight: bold;">String</span> <span style="color: #909183;">{</span>
        <span style="color: #A020F0;">format!</span><span style="color: #709870;">(</span><span style="color: #4E9A06;">"</span><span style="color: #4E9A06; font-style: italic;">{}</span><span style="color: #4E9A06;">, by </span><span style="color: #4E9A06; font-style: italic;">{}</span><span style="color: #4E9A06;"> (</span><span style="color: #4E9A06; font-style: italic;">{}</span><span style="color: #4E9A06;">)"</span>, <span style="color: #A52A2A; font-weight: bold;">self</span>.headline, <span style="color: #A52A2A; font-weight: bold;">self</span>.author, <span style="color: #A52A2A; font-weight: bold;">self</span>.location<span style="color: #709870;">)</span>
    <span style="color: #909183;">}</span>
<span style="color: #7388d6;">}</span>

<span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #A52A2A; font-weight: bold;">struct</span> <span style="color: #2F8B58; font-weight: bold;">Tweet</span> <span style="color: #7388d6;">{</span>
    <span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #0084C8; font-weight: bold;">username</span>: <span style="color: #2F8B58; font-weight: bold;">String</span>,
    <span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #0084C8; font-weight: bold;">content</span>: <span style="color: #2F8B58; font-weight: bold;">String</span>,
    <span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #0084C8; font-weight: bold;">reply</span>: <span style="color: #2F8B58; font-weight: bold;">bool</span>,
    <span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #0084C8; font-weight: bold;">retweet</span>: <span style="color: #2F8B58; font-weight: bold;">bool</span>,
<span style="color: #7388d6;">}</span>

<span style="color: #A52A2A; font-weight: bold;">impl</span> <span style="color: #2F8B58; font-weight: bold;">Summary</span> <span style="color: #A52A2A; font-weight: bold;">for</span> <span style="color: #2F8B58; font-weight: bold;">Tweet</span> <span style="color: #7388d6;">{</span>
    <span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">summarize</span><span style="color: #909183;">(</span><span style="color: #2E3436; background-color: #EDEDED;">&amp;</span><span style="color: #A52A2A; font-weight: bold;">self</span><span style="color: #909183;">)</span> -&gt; <span style="color: #2F8B58; font-weight: bold;">String</span> <span style="color: #909183;">{</span>
        <span style="color: #A020F0;">format!</span><span style="color: #709870;">(</span><span style="color: #4E9A06;">"</span><span style="color: #4E9A06; font-style: italic;">{}</span><span style="color: #4E9A06;">: </span><span style="color: #4E9A06; font-style: italic;">{}</span><span style="color: #4E9A06;">"</span>, <span style="color: #A52A2A; font-weight: bold;">self</span>.username, <span style="color: #A52A2A; font-weight: bold;">self</span>.content<span style="color: #709870;">)</span>
    <span style="color: #909183;">}</span>
<span style="color: #7388d6;">}</span>
<span style="color: #707183;">}</span>

</pre>
</div>


<p>
这样我们就可以为这两个类型的对象使用这个trait了。
</p>


<div class="org-src-container">
<pre class="src src-rust"><span style="color: #A52A2A; font-weight: bold;">let</span> <span style="color: #0084C8; font-weight: bold;">tweet</span> = <span style="color: #2F8B58; font-weight: bold;">Tweet</span> <span style="color: #707183;">{</span>
    <span style="color: #0084C8; font-weight: bold;">username</span>: <span style="color: #2F8B58; font-weight: bold;">String</span>::from<span style="color: #7388d6;">(</span><span style="color: #4E9A06;">"horse_ebooks"</span><span style="color: #7388d6;">)</span>,
    <span style="color: #0084C8; font-weight: bold;">content</span>: <span style="color: #2F8B58; font-weight: bold;">String</span>::from<span style="color: #7388d6;">(</span><span style="color: #4E9A06;">"of course, as you probably already know, people"</span><span style="color: #7388d6;">)</span>,
    <span style="color: #0084C8; font-weight: bold;">reply</span>: <span style="color: #A52A2A; font-weight: bold;">false</span>,
    <span style="color: #0084C8; font-weight: bold;">retweet</span>: <span style="color: #A52A2A; font-weight: bold;">false</span>,
<span style="color: #707183;">}</span>;

<span style="color: #A020F0;">println!</span><span style="color: #707183;">(</span><span style="color: #4E9A06;">"1 new tweet: </span><span style="color: #4E9A06; font-style: italic;">{}</span><span style="color: #4E9A06;">"</span>, tweet.summarize<span style="color: #7388d6;">()</span><span style="color: #707183;">)</span>;
</pre>
</div>

<p>
当然，我们也可以为trait写一个默认的实现。
</p>


<div class="org-src-container">
<pre class="src src-rust">
<span style="color: #A020F0;">#!</span><span style="color: #707183;">[</span><span style="color: #A020F0;">allow</span><span style="color: #7388d6;">(</span><span style="color: #A020F0;">unused</span><span style="color: #7388d6;">)</span><span style="color: #707183;">]</span>
<span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">main</span><span style="color: #707183;">()</span> <span style="color: #707183;">{</span>
<span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #A52A2A; font-weight: bold;">trait</span> <span style="color: #2F8B58; font-weight: bold;">Summary</span> <span style="color: #7388d6;">{</span>
    <span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">summarize</span><span style="color: #909183;">(</span><span style="color: #2E3436; background-color: #EDEDED;">&amp;</span><span style="color: #A52A2A; font-weight: bold;">self</span><span style="color: #909183;">)</span> -&gt; <span style="color: #2F8B58; font-weight: bold;">String</span> <span style="color: #909183;">{</span>
        <span style="color: #2F8B58; font-weight: bold;">String</span>::from<span style="color: #709870;">(</span><span style="color: #4E9A06;">"(Read more...)"</span><span style="color: #709870;">)</span>
    <span style="color: #909183;">}</span>
<span style="color: #7388d6;">}</span>
<span style="color: #707183;">}</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org034c2b6" class="outline-3">
<h3 id="org034c2b6"><span class="section-number-3">2.3</span> 把trait当作一种高级类型，以约束函数和泛型</h3>
<div class="outline-text-3" id="text-2-3">
</div>
<div id="outline-container-org70cd176" class="outline-4">
<h4 id="org70cd176"><span class="section-number-4">2.3.1</span> 用trait约束函数</h4>
<div class="outline-text-4" id="text-2-3-1">
<p>
我们的函数过去通过数值的类型去判断输入是否合适，这当然是为了编译的检查。
还有一种方法也可以为编译提供检查，那就是提供trait，因为trait，本身就提供了一个类型空间。从某种程度上来讲，提供trait可以产生更加细粒度的编译检查，同时提供更加广义的函数使用空间。
</p>

<p>
先看一个例子：
</p>

<div class="org-src-container">
<pre class="src src-rust"><span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">notify</span><span style="color: #707183;">(</span><span style="color: #0084C8; font-weight: bold;">item</span>: <span style="color: #A52A2A; font-weight: bold;">impl</span> <span style="color: #2F8B58; font-weight: bold;">Summary</span><span style="color: #707183;">)</span> <span style="color: #707183;">{</span>
    <span style="color: #A020F0;">println!</span><span style="color: #7388d6;">(</span><span style="color: #4E9A06;">"Breaking news! </span><span style="color: #4E9A06; font-style: italic;">{}</span><span style="color: #4E9A06;">"</span>, item.summarize<span style="color: #909183;">()</span><span style="color: #7388d6;">)</span>;
<span style="color: #707183;">}</span>

</pre>
</div>

<p>
推荐使用以上格式，如果能用，它实质上是下面的一种简化：
</p>

<div class="org-src-container">
<pre class="src src-rust"><span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">notify</span><span style="color: #707183;">&lt;</span><span style="color: #0084C8; font-weight: bold;">T</span>: <span style="color: #2F8B58; font-weight: bold;">Summary</span><span style="color: #707183;">&gt;(</span><span style="color: #0084C8; font-weight: bold;">item</span>: <span style="color: #2F8B58; font-weight: bold;">T</span><span style="color: #707183;">)</span> <span style="color: #707183;">{</span>
    <span style="color: #A020F0;">println!</span><span style="color: #7388d6;">(</span><span style="color: #4E9A06;">"Breaking news! </span><span style="color: #4E9A06; font-style: italic;">{}</span><span style="color: #4E9A06;">"</span>, item.summarize<span style="color: #909183;">()</span><span style="color: #7388d6;">)</span>;
<span style="color: #707183;">}</span>
</pre>
</div>

<p>
但如果较为复杂的泛型就简化不了了，如多个类型：
</p>
<div class="org-src-container">
<pre class="src src-rust"><span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">notify</span><span style="color: #707183;">&lt;</span><span style="color: #0084C8; font-weight: bold;">T</span>: <span style="color: #2F8B58; font-weight: bold;">Summary</span><span style="color: #707183;">&gt;(</span><span style="color: #0084C8; font-weight: bold;">item1</span>: <span style="color: #2F8B58; font-weight: bold;">T</span>, <span style="color: #0084C8; font-weight: bold;">item2</span>: <span style="color: #2F8B58; font-weight: bold;">T</span><span style="color: #707183;">)</span> <span style="color: #707183;">{</span>
<span style="color: #707183;">}</span>
</pre>
</div>
<p>
多个trait的话，同样地，也有两种形式：
</p>
<div class="org-src-container">
<pre class="src src-rust"><span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">notify</span><span style="color: #707183;">(</span><span style="color: #0084C8; font-weight: bold;">item</span>: <span style="color: #A52A2A; font-weight: bold;">impl</span> <span style="color: #2F8B58; font-weight: bold;">Summary</span> + <span style="color: #2F8B58; font-weight: bold;">Display</span><span style="color: #707183;">)</span> <span style="color: #707183;">{}</span>
<span style="color: #A52A2A; font-weight: bold;">pub</span> <span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">notify</span><span style="color: #707183;">&lt;</span><span style="color: #0084C8; font-weight: bold;">T</span>: <span style="color: #2F8B58; font-weight: bold;">Summary</span> + <span style="color: #2F8B58; font-weight: bold;">Display</span><span style="color: #707183;">&gt;(</span><span style="color: #0084C8; font-weight: bold;">item</span>: <span style="color: #2F8B58; font-weight: bold;">T</span><span style="color: #707183;">)</span> <span style="color: #707183;">{}</span>

</pre>
</div>

<p>
如果是不同类型的，就不能简化了：
</p>
<div class="org-src-container">
<pre class="src src-rust">      <span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">some_function</span><span style="color: #707183;">&lt;</span><span style="color: #0084C8; font-weight: bold;">T</span>: <span style="color: #2F8B58; font-weight: bold;">Display</span> + <span style="color: #2F8B58; font-weight: bold;">Clone</span>, <span style="color: #0084C8; font-weight: bold;">U</span>: <span style="color: #2F8B58; font-weight: bold;">Clone</span> + <span style="color: #2F8B58; font-weight: bold;">Debug</span><span style="color: #707183;">&gt;(</span><span style="color: #0084C8; font-weight: bold;">t</span>: <span style="color: #2F8B58; font-weight: bold;">T</span>, <span style="color: #0084C8; font-weight: bold;">u</span>: <span style="color: #2F8B58; font-weight: bold;">U</span><span style="color: #707183;">)</span> -&gt; <span style="color: #2F8B58; font-weight: bold;">i32</span> <span style="color: #707183;">{</span>
<span style="color: #707183;">}</span>
<span style="color: #204A87;">//</span><span style="color: #204A87;">&#31532;&#20108;&#31181;&#20889;&#27861;</span>
<span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">some_function</span><span style="color: #707183;">&lt;</span><span style="color: #2F8B58; font-weight: bold;">T</span>, <span style="color: #2F8B58; font-weight: bold;">U</span><span style="color: #707183;">&gt;(</span><span style="color: #0084C8; font-weight: bold;">t</span>: <span style="color: #2F8B58; font-weight: bold;">T</span>, <span style="color: #0084C8; font-weight: bold;">u</span>: <span style="color: #2F8B58; font-weight: bold;">U</span><span style="color: #707183;">)</span> -&gt; <span style="color: #2F8B58; font-weight: bold;">i32</span>
    <span style="color: #A52A2A; font-weight: bold;">where</span> <span style="color: #0084C8; font-weight: bold;">T</span>: <span style="color: #2F8B58; font-weight: bold;">Display</span> + <span style="color: #2F8B58; font-weight: bold;">Clone</span>,
          <span style="color: #0084C8; font-weight: bold;">U</span>: <span style="color: #2F8B58; font-weight: bold;">Clone</span> + <span style="color: #2F8B58; font-weight: bold;">Debug</span>
<span style="color: #707183;">{</span>

</pre>
</div>

<p>
返回值也一样可以用trait约束：
</p>

<div class="org-src-container">
<pre class="src src-rust"><span style="color: #A52A2A; font-weight: bold;">fn</span> <span style="color: #00578E; font-weight: bold;">returns_summarizable</span><span style="color: #707183;">()</span> -&gt; <span style="color: #A52A2A; font-weight: bold;">impl</span> <span style="color: #2F8B58; font-weight: bold;">Summary</span> <span style="color: #707183;">{</span>
    <span style="color: #2F8B58; font-weight: bold;">Tweet</span> <span style="color: #7388d6;">{</span>
        <span style="color: #0084C8; font-weight: bold;">username</span>: <span style="color: #2F8B58; font-weight: bold;">String</span>::from<span style="color: #909183;">(</span><span style="color: #4E9A06;">"horse_ebooks"</span><span style="color: #909183;">)</span>,
        <span style="color: #0084C8; font-weight: bold;">content</span>: <span style="color: #2F8B58; font-weight: bold;">String</span>::from<span style="color: #909183;">(</span><span style="color: #4E9A06;">"of course, as you probably already know, people"</span><span style="color: #909183;">)</span>,
        <span style="color: #0084C8; font-weight: bold;">reply</span>: <span style="color: #A52A2A; font-weight: bold;">false</span>,
        <span style="color: #0084C8; font-weight: bold;">retweet</span>: <span style="color: #A52A2A; font-weight: bold;">false</span>,
    <span style="color: #7388d6;">}</span>
<span style="color: #707183;">}</span>

</pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: Thu Nov 18 21:36:05 2021</p>
<p class="author">Author: Zi Liang</p>
<p class="date">Created: 2022-03-26 周六 21:55</p>
<p class="validation"><a href="https://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
